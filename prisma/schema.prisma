// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @unique @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN 
}

model Collection {
  id        String    @id @unique @default(uuid()) @db.Uuid
  name      String
  products  Product[]
}

model Product {
  id           String      @id @unique @default(uuid()) @db.Uuid
  name         String
  description  String
  price        Float
  image String
  collectionID String      @db.Uuid
  collection   Collection  @relation(fields: [collectionID], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
}

model Order {
  id          String      @id @unique @default(uuid()) @db.Uuid
  user        User        @relation(fields: [userID], references: [id])
  userID      String      @db.Uuid
  orderItems  OrderItem[]
  adress      String
  status      Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @unique @default(uuid()) @db.Uuid
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.Uuid
  amount    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  quantity  Int
  price     Float
}